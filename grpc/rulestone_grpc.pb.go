// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RulestoneServiceClient is the client API for RulestoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RulestoneServiceClient interface {
	CreateRuleEngine(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RuleEngineResponse, error)
	AddRuleFromJsonString(ctx context.Context, in *RuleFromStringRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	AddRuleFromYamlString(ctx context.Context, in *RuleFromStringRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	AddRulesFromFilePath(ctx context.Context, in *RuleFromFileRequest, opts ...grpc.CallOption) (*NumRulesResponse, error)
	AddRulesFromDirectoryPath(ctx context.Context, in *RuleFromDirectoryRequest, opts ...grpc.CallOption) (*NumRulesResponse, error)
	Activate(ctx context.Context, in *RuleEngineRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	Match(ctx context.Context, opts ...grpc.CallOption) (RulestoneService_MatchClient, error)
}

type rulestoneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRulestoneServiceClient(cc grpc.ClientConnInterface) RulestoneServiceClient {
	return &rulestoneServiceClient{cc}
}

func (c *rulestoneServiceClient) CreateRuleEngine(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RuleEngineResponse, error) {
	out := new(RuleEngineResponse)
	err := c.cc.Invoke(ctx, "/rulestone.RulestoneService/CreateRuleEngine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulestoneServiceClient) AddRuleFromJsonString(ctx context.Context, in *RuleFromStringRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, "/rulestone.RulestoneService/AddRuleFromJsonString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulestoneServiceClient) AddRuleFromYamlString(ctx context.Context, in *RuleFromStringRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, "/rulestone.RulestoneService/AddRuleFromYamlString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulestoneServiceClient) AddRulesFromFilePath(ctx context.Context, in *RuleFromFileRequest, opts ...grpc.CallOption) (*NumRulesResponse, error) {
	out := new(NumRulesResponse)
	err := c.cc.Invoke(ctx, "/rulestone.RulestoneService/AddRulesFromFilePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulestoneServiceClient) AddRulesFromDirectoryPath(ctx context.Context, in *RuleFromDirectoryRequest, opts ...grpc.CallOption) (*NumRulesResponse, error) {
	out := new(NumRulesResponse)
	err := c.cc.Invoke(ctx, "/rulestone.RulestoneService/AddRulesFromDirectoryPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulestoneServiceClient) Activate(ctx context.Context, in *RuleEngineRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/rulestone.RulestoneService/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulestoneServiceClient) Match(ctx context.Context, opts ...grpc.CallOption) (RulestoneService_MatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &RulestoneService_ServiceDesc.Streams[0], "/rulestone.RulestoneService/Match", opts...)
	if err != nil {
		return nil, err
	}
	x := &rulestoneServiceMatchClient{stream}
	return x, nil
}

type RulestoneService_MatchClient interface {
	Send(*MatchRequest) error
	Recv() (*MatchResponse, error)
	grpc.ClientStream
}

type rulestoneServiceMatchClient struct {
	grpc.ClientStream
}

func (x *rulestoneServiceMatchClient) Send(m *MatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rulestoneServiceMatchClient) Recv() (*MatchResponse, error) {
	m := new(MatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RulestoneServiceServer is the server API for RulestoneService service.
// All implementations must embed UnimplementedRulestoneServiceServer
// for forward compatibility
type RulestoneServiceServer interface {
	CreateRuleEngine(context.Context, *EmptyRequest) (*RuleEngineResponse, error)
	AddRuleFromJsonString(context.Context, *RuleFromStringRequest) (*RuleResponse, error)
	AddRuleFromYamlString(context.Context, *RuleFromStringRequest) (*RuleResponse, error)
	AddRulesFromFilePath(context.Context, *RuleFromFileRequest) (*NumRulesResponse, error)
	AddRulesFromDirectoryPath(context.Context, *RuleFromDirectoryRequest) (*NumRulesResponse, error)
	Activate(context.Context, *RuleEngineRequest) (*EmptyResponse, error)
	Match(RulestoneService_MatchServer) error
	mustEmbedUnimplementedRulestoneServiceServer()
}

// UnimplementedRulestoneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRulestoneServiceServer struct {
}

func (UnimplementedRulestoneServiceServer) CreateRuleEngine(context.Context, *EmptyRequest) (*RuleEngineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRuleEngine not implemented")
}
func (UnimplementedRulestoneServiceServer) AddRuleFromJsonString(context.Context, *RuleFromStringRequest) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRuleFromJsonString not implemented")
}
func (UnimplementedRulestoneServiceServer) AddRuleFromYamlString(context.Context, *RuleFromStringRequest) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRuleFromYamlString not implemented")
}
func (UnimplementedRulestoneServiceServer) AddRulesFromFilePath(context.Context, *RuleFromFileRequest) (*NumRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRulesFromFilePath not implemented")
}
func (UnimplementedRulestoneServiceServer) AddRulesFromDirectoryPath(context.Context, *RuleFromDirectoryRequest) (*NumRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRulesFromDirectoryPath not implemented")
}
func (UnimplementedRulestoneServiceServer) Activate(context.Context, *RuleEngineRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedRulestoneServiceServer) Match(RulestoneService_MatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Match not implemented")
}
func (UnimplementedRulestoneServiceServer) mustEmbedUnimplementedRulestoneServiceServer() {}

// UnsafeRulestoneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RulestoneServiceServer will
// result in compilation errors.
type UnsafeRulestoneServiceServer interface {
	mustEmbedUnimplementedRulestoneServiceServer()
}

func RegisterRulestoneServiceServer(s grpc.ServiceRegistrar, srv RulestoneServiceServer) {
	s.RegisterService(&RulestoneService_ServiceDesc, srv)
}

func _RulestoneService_CreateRuleEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulestoneServiceServer).CreateRuleEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rulestone.RulestoneService/CreateRuleEngine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulestoneServiceServer).CreateRuleEngine(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RulestoneService_AddRuleFromJsonString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleFromStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulestoneServiceServer).AddRuleFromJsonString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rulestone.RulestoneService/AddRuleFromJsonString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulestoneServiceServer).AddRuleFromJsonString(ctx, req.(*RuleFromStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RulestoneService_AddRuleFromYamlString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleFromStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulestoneServiceServer).AddRuleFromYamlString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rulestone.RulestoneService/AddRuleFromYamlString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulestoneServiceServer).AddRuleFromYamlString(ctx, req.(*RuleFromStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RulestoneService_AddRulesFromFilePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleFromFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulestoneServiceServer).AddRulesFromFilePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rulestone.RulestoneService/AddRulesFromFilePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulestoneServiceServer).AddRulesFromFilePath(ctx, req.(*RuleFromFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RulestoneService_AddRulesFromDirectoryPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleFromDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulestoneServiceServer).AddRulesFromDirectoryPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rulestone.RulestoneService/AddRulesFromDirectoryPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulestoneServiceServer).AddRulesFromDirectoryPath(ctx, req.(*RuleFromDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RulestoneService_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulestoneServiceServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rulestone.RulestoneService/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulestoneServiceServer).Activate(ctx, req.(*RuleEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RulestoneService_Match_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RulestoneServiceServer).Match(&rulestoneServiceMatchServer{stream})
}

type RulestoneService_MatchServer interface {
	Send(*MatchResponse) error
	Recv() (*MatchRequest, error)
	grpc.ServerStream
}

type rulestoneServiceMatchServer struct {
	grpc.ServerStream
}

func (x *rulestoneServiceMatchServer) Send(m *MatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rulestoneServiceMatchServer) Recv() (*MatchRequest, error) {
	m := new(MatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RulestoneService_ServiceDesc is the grpc.ServiceDesc for RulestoneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RulestoneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rulestone.RulestoneService",
	HandlerType: (*RulestoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRuleEngine",
			Handler:    _RulestoneService_CreateRuleEngine_Handler,
		},
		{
			MethodName: "AddRuleFromJsonString",
			Handler:    _RulestoneService_AddRuleFromJsonString_Handler,
		},
		{
			MethodName: "AddRuleFromYamlString",
			Handler:    _RulestoneService_AddRuleFromYamlString_Handler,
		},
		{
			MethodName: "AddRulesFromFilePath",
			Handler:    _RulestoneService_AddRulesFromFilePath_Handler,
		},
		{
			MethodName: "AddRulesFromDirectoryPath",
			Handler:    _RulestoneService_AddRulesFromDirectoryPath_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _RulestoneService_Activate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Match",
			Handler:       _RulestoneService_Match_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/rulestone.proto",
}
